plugins {
    id 'java'
    id "net.minecraftforge.jarjar" version "0.1.0"
}

group = 'org.mangorage'
version = '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}

jarJar.register()

dependencies {
    testImplementation platform('org.junit:junit-bom:5.10.0')
    testImplementation 'org.junit.jupiter:junit-jupiter'

    implementation 'com.google.code.gson:gson:2.11.0'


    jarJar(project(":game")) {
        jarJar.configure(it) {
            module {
                group = 'game'
            }
            version = '1.0.0'
        }
    }

    jarJar(project(":loader")) {
        jarJar.configure(it) {
            module {
                group = 'loader'
            }
            version = '2.0.0'
        }
    }

    jarJar("com.google.code.gson:gson:2.11.0") {
        jarJar.configure(it) {
            module {
                group = 'library'
            }
            version = '2.11.0'
        }
    }

    java {
        modularity.inferModulePath = true
    }
}

sourceSets {
    main {
        // Make resources go into the same output folder as classes
        output.resourcesDir = output.classesDirs.singleFile
    }
}

test {
    useJUnitPlatform()
}

jar {
    manifest {
        attributes(
                'Main-Class': 'org.mangorage.boot.Boot'
        )
    }
}

tasks.register('mergeModule') {
    def outputDir = layout.buildDirectory.dir('mergedModule')

    doLast {
        copy {
            from sourceSets.main.output.classesDirs
            into outputDir
        }
        copy {
            from sourceSets.main.output.resourcesDir
            into outputDir
        }
    }
}

task runGame(type: JavaExec) {
    group = 'application'
    description = "Runs the built game jar (debuggable)"

    def runDir = file("$buildDir/run")
    def jarFile = file("$buildDir/libs/${project.name}-${version}-all.jar")

    doFirst {
        if (!runDir.exists()) {
            runDir.mkdirs()
        }
        if (!jarFile.exists()) {
            throw new GradleException("Jar not built yet! Run 'gradle build' first.")
        }
    }

    workingDir = runDir

    // Instead of classpath + mainClass, we just tell it "run this jar"
    mainClass = "-jar"
    args = [jarFile]

    // Optional: enable remote debugging
    jvmArgs = [
            "-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5005"
    ]
}

runGame.dependsOn build