import  net.minecraftforge.jarjar.gradle.JarJar;

plugins {
    id 'java'
    id "net.minecraftforge.jarjar" version "0.1.0"
}

group = 'org.mangorage'
version = '1.0-SNAPSHOT'

repositories {
    mavenCentral()
    maven {
        url = "https://maven.minecraftforge.net/"
    }
    maven {
        url = "https://libraries.minecraft.net/"
    }

    maven {
        url = uri("https://maven.terraformersmc.com/")
    }
}

jarJar.register()

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

subprojects {
    apply plugin: 'java'  // Ensure the java plugin is applied

    java {
        toolchain {
            languageVersion = JavaLanguageVersion.of(21)
        }
    }

    tasks.withType(JavaCompile) {
        options.release.set(21)
    }
}

dependencies {
    testImplementation platform('org.junit:junit-bom:5.10.0')
    testImplementation 'org.junit.jupiter:junit-jupiter'

    jarJar('com.mojang:jtracy:1.0.29') {
        jarJar.configure(it) {
            module {
                group = 'libraries'
            }
        }
    }

    // Mixin

    jarJar("net.fabricmc:sponge-mixin:0.15.4+mixin.0.8.7") {
        jarJar.configure(it) {
            module {
                group = 'libraries'
            }
        }
    }

    jarJar("io.github.llamalad7:mixinextras-common:0.4.1") {
        jarJar.configure(it) {
            module {
                group = 'libraries'
            }
        }
    }

    jarJar("org.ow2.asm:asm:9.8") {
        jarJar.configure(it) {
            module {
                group = 'libraries'
            }
        }
    }

    jarJar("org.ow2.asm:asm-util:9.8") {
        jarJar.configure(it) {
            module {
                group = 'libraries'
            }
        }
    }

    jarJar("org.ow2.asm:asm-analysis:9.8") {
        jarJar.configure(it) {
            module {
                group = 'libraries'
            }
        }
    }

    jarJar("org.ow2.asm:asm-tree:9.8") {
        jarJar.configure(it) {
            module {
                group = 'libraries'
            }
        }
    }

    jarJar("org.ow2.asm:asm-commons:9.8") {
        jarJar.configure(it) {
            module {
                group = 'libraries'
            }
        }
    }

    // Forge

    jarJar('net.minecraftforge:modlauncher:10.2.4') {
        jarJar.configure(it) {
            module {
                group = 'libraries'
            }
        }
    }

    jarJar('net.minecraftforge:bootstrap-api:2.0.0') {
        jarJar.configure(it) {
            module {
                group = 'libraries'
            }
        }
    }

    jarJar('net.minecraftforge:unsafe:0.9.2') {
        jarJar.configure(it) {
            module {
                group = 'libraries'
            }
        }
    }

    jarJar('net.minecraftforge:securemodules:2.2.21') {
        jarJar.configure(it) {
            module {
                group = 'libraries'
            }
        }
    }



    // Normal

    jarJar(project(":mixinsupport")) {
        jarJar.configure(it) {
            module {
                group = 'game'
            }
            version = '1.1.0'
        }
    }

    jarJar(project(":examplemod")) {
        jarJar.configure(it) {
            module {
                group = 'game'
            }
            version = '1.1.0'
        }
    }

    jarJar(project(":loader")) {
        jarJar.configure(it) {
            module {
                group = 'loader'
            }
            version = '2.0.0'
        }
    }

    jarJar(compileOnly('net.minecraftforge:minecraft-mavenizer:0.3.19')) {
        jarJar.configure(it) {
            module {
                group = 'mavenizer'
            }
        }
    }

    java {
        modularity.inferModulePath = true
    }
}

sourceSets {
    main {
        // Make resources go into the same output folder as classes
        output.resourcesDir = output.classesDirs.singleFile
    }
}


test {
    useJUnitPlatform()
}

jar {
    manifest {
        attributes(
                'Main-Class': 'org.mangorage.boot.Boot'
        )
    }
}

tasks.getByName("jarJar").dependsOn("mixinsupport:build", "examplemod:build")

task runGame(type: JavaExec) {
    dependsOn(":jarJar")

    group = 'application'
    description = "Runs the built game jar (debuggable)"

    def runDir = file("$buildDir/run")
    def jarFile = tasks.named('jarJar', JarJar).flatMap(JarJar.&getArchiveFile).get()

    doFirst {
        if (!runDir.exists()) {
            runDir.mkdirs()
        }
    }

    workingDir = runDir

    // Instead of classpath + mainClass, we just tell it "run this jar"
    mainClass = "-jar"
    args = [jarFile]

    // Optional: enable remote debugging
    jvmArgs = [
            "-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5005"
    ]
}